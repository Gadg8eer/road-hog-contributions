print("[RENDER LANG] render_lang.py")

import road_hog
import utils
from polar_fox import git_info

import shutil
import os
currentdir = os.curdir
from time import time

import sys
sys.path.append(os.path.join('src')) # add to the module search path

import codecs # used for writing files - more unicode friendly than standard open() module

from chameleon import PageTemplateLoader # chameleon used in most template cases
# setup the places we look for templates
templates = PageTemplateLoader(os.path.join(currentdir, 'src', 'templates'))

lang_src = os.path.join(currentdir, 'src', 'lang')
lang_dst = os.path.join(road_hog.generated_files_path, 'lang', 'road-hog') # !! road-hog suffix is JFDI hax to get multi-grf compile compiling

if os.path.exists(lang_dst):
    shutil.rmtree(lang_dst)
shutil.copytree(lang_src, lang_dst)
hint_file = codecs.open(os.path.join(lang_dst, '_lang_files_here_are_generated.txt'), 'w','utf8')
hint_file.write("Don't edit the lang files here.  They're generated by the build script. \n Edit the ones in lang_src instead.")
hint_file.close()

def main():
    start = time()
    road_hog.main()

    """
    roster = road_hog.roster_manager.active_roster
    """
    # expect Exception failures if there is no active roster, don't bother explicitly handling that case
    # !! shim roster - needs roster manager providing, then roster should be a keyword arg here, as per Horse
    road_hog.main() # should be done in this module's main, but shim !!
    from rosters import (
        registered_rosters,
    )  # Road Hog has support for compiling only active roster, copy if/when needed
    roster = registered_rosters[0] # !! shim
    consists = roster.consists_in_buy_menu_order

    languages_with_generation = ('english',)

    for i in languages_with_generation:
        #compile strings to single lang file - english
        lang_template = templates[i + '.pylng']

        src_file = codecs.open(os.path.join(lang_src, i + '.lng'), 'r','utf8')
        dst_file = codecs.open(os.path.join(lang_dst, i + '.lng'), 'w','utf8')
        lang_content = src_file.read()
        lang_content = lang_content + lang_template(consists=consists, git_info=git_info, roster=roster)
        dst_file.write(lang_content)
        dst_file.close()
    # eh, how long does this take anyway?
    print(format((time() - start), '.2f')+'s')

if __name__ == '__main__':
    main()
