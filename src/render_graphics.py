print("[RENDER GRAPHICS] render_graphics.py")

import codecs # used for writing files - more unicode friendly than standard open() module

import shutil
import sys
import os
currentdir = os.curdir
from multiprocessing import Pool
import multiprocessing
logger = multiprocessing.log_to_stderr()
logger.setLevel(25)
from time import time

import road_hog
import utils
import global_constants

# get args passed by makefile
makefile_args = utils.get_makefile_args(sys)
num_pool_workers = makefile_args.get('num_pool_workers', 0) # default to no mp, makes debugging easier (mp fails to pickle errors correctly)
if num_pool_workers == 0:
    use_multiprocessing = False
    print('Multiprocessing disabled: (PW=0)') # just print, no need for a coloured echo_message
else:
    raise BaseException("PW is not 0, this is unsupported as of September 2023 because the compile fails with use_multiprocessing - needs fixed")
    use_multiprocessing = True
    print('Multiprocessing enabled: (PW=' + str(num_pool_workers) + ')') # just print, no need for a coloured echo_message

graphics_input_path = os.path.join(currentdir, 'src', 'graphics')
graphics_output_path = os.path.join(road_hog.generated_files_path, 'graphics')
if os.path.exists(graphics_output_path):
    shutil.rmtree(graphics_output_path)
os.mkdir(graphics_output_path)

hint_file = codecs.open(os.path.join(graphics_output_path, '_graphics_files_here_are_generated.txt'), 'w','utf8')
hint_file.write("Don't edit the graphics files here.  They're generated by the build script. \n Edit sources in graphics_sources and export spritesheets to graphics_input_path.")
hint_file.close()


def run_pipelines(consist):
    if len(consist.gestalt_graphics.pipelines) == 0:
        # no pipelines to run, just copy graphics file
        shutil.copy(os.path.join(graphics_input_path, consist.roster_id, consist.id + '.png'), graphics_output_path)
    else:
        # run pipelines, obvs
        for pipeline in consist.gestalt_graphics.pipelines:
            pipeline.render(consist, global_constants)

# wrapped in a main() function so this can be called explicitly, because unexpected multiprocessing fork bombs are bad
# !!! compare this with render_graphics in Horse
def main():
    start = time()
    road_hog.main()

    """
    roster = road_hog.roster_manager.active_roster
    """
    # expect Exception failures if there is no active roster, don't bother explicitly handling that case
    # !! shim roster - needs roster manager providing, then roster should be a keyword arg here, as per Horse
    from rosters import (
        registered_rosters,
    )  # Road Hog has support for compiling only active roster, copy if/when needed
    roster = registered_rosters[0] # !! shim
    consists = roster.consists_in_buy_menu_order

    if use_multiprocessing == False:
        for consist in consists:
            run_pipelines(consist)
    else:
        pool = Pool(processes=num_pool_workers)
        pool.map(run_pipelines, consists)
        pool.close()
    # eh, how long does this take anyway?
    print(format((time() - start), '.2f')+'s')

if __name__ == '__main__':
    main()
